generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NOTE: No enums on SQLite. Use strings instead.

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  role             String   @default("MACHINIST")
  active           Boolean  @default(true)
  // Credentials provider (nullable)
  passwordHash     String?

  orders           Order[]  @relation("AssignedOrders")
  quotes           Quote[]
  notes            Note[]
  timeLogs         TimeLog[]
  checklistToggles OrderChecklist[] @relation("ChecklistToggledBy")
  uploadedAttachments Attachment[] @relation("UserAttachments")
  statusHistories StatusHistory[] @relation("UserStatusHistory")

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Customer {
  id      String  @id @default(cuid())
  name    String
  contact String?
  phone   String?
  email   String?
  address String?

  orders  Order[]
  quotes  Quote[]

  @@index([name])
  @@unique([name])
}

model Material {
  id    String  @id @default(cuid())
  name  String  @unique
  spec  String?
  notes String?

  parts OrderPart[]
}

model Vendor {
  id     String  @id @default(cuid())
  name   String  @unique
  url    String?
  phone  String?
  notes  String?

  orders Order[]
  quoteVendorItems QuoteVendorItem[]
}

model ChecklistItem {
  id     String  @id @default(cuid())
  label  String
  active Boolean @default(true)
  orderChecklist OrderChecklist[]
  @@unique([label])
}

model Order {
  id               String   @id @default(cuid())
  orderNumber      String
  customerId       String
  customer         Customer @relation(fields: [customerId], references: [id])
  status           String
  priority         String
  dueDate          DateTime
  receivedDate     DateTime
  modelIncluded    Boolean @default(false)
  materialNeeded   Boolean @default(false)
  materialOrdered  Boolean @default(false)
  vendorId         String?
  vendor           Vendor? @relation(fields: [vendorId], references: [id])
  poNumber         String?
  assignedMachinistId String?
  assignedMachinist   User? @relation("AssignedOrders", fields: [assignedMachinistId], references: [id])
  parts            OrderPart[]
  checklist        OrderChecklist[]
  attachments      Attachment[]
  notes            Note[]
  timeLogs         TimeLog[]
  statusHistory    StatusHistory[]
}

model OrderPart {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  partNumber String
  quantity   Int
  materialId String?
  material   Material? @relation(fields: [materialId], references: [id])
  notes      String?
}

model OrderChecklist {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id])
  checklistItemId String
  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id])
  toggledById     String?
  toggledBy       User?    @relation("ChecklistToggledBy", fields: [toggledById], references: [id])
}

model Note {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model TimeLog {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  phase     String
  minutes   Int
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  label     String?
  mimeType  String?
  uploadedById String?
  uploadedBy   User? @relation("UserAttachments", fields: [uploadedById], references: [id])
  createdAt DateTime @default(now())
}

model StatusHistory {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  from      String
  to        String
  userId    String?
  user      User?    @relation("UserStatusHistory", fields: [userId], references: [id])
  reason    String?
  createdAt DateTime @default(now())
}

model Addon {
  id          String   @id @default(cuid())
  name        String
  description String?
  rateType    String
  rateCents   Int
  active      Boolean  @default(true)

  quoteSelections QuoteAddonSelection[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([active])
  @@unique([name])
}

model Quote {
  id               String   @id @default(cuid())
  quoteNumber      String
  companyName      String
  contactName      String?
  contactEmail     String?
  contactPhone     String?
  customerId       String?
  customer         Customer? @relation(fields: [customerId], references: [id])
  status           String    @default("DRAFT")
  materialSummary  String?
  purchaseItems    String?
  requirements     String?
  notes            String?
  multiPiece       Boolean   @default(false)
  basePriceCents   Int       @default(0)
  addonsTotalCents Int       @default(0)
  vendorTotalCents Int       @default(0)
  totalCents       Int       @default(0)
  metadata         String?

  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  parts           QuotePart[]
  vendorItems     QuoteVendorItem[]
  addonSelections QuoteAddonSelection[]
  attachments     QuoteAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([companyName])
  @@unique([quoteNumber])
}

model QuotePart {
  id         String @id @default(cuid())
  quoteId    String
  quote      Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  name       String
  description String?
  quantity   Int    @default(1)
  pieceCount Int    @default(1)
  notes      String?
}

model QuoteVendorItem {
  id              String  @id @default(cuid())
  quoteId         String
  quote           Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  vendorId        String?
  vendor          Vendor? @relation(fields: [vendorId], references: [id])
  vendorName      String?
  partNumber      String?
  partUrl         String?
  basePriceCents  Int     @default(0)
  markupPercent   Float   @default(0)
  finalPriceCents Int     @default(0)
  notes           String?
}

model QuoteAddonSelection {
  id               String @id @default(cuid())
  quoteId          String
  quote            Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  addonId          String
  addon            Addon  @relation(fields: [addonId], references: [id])
  units            Float  @default(0)
  rateTypeSnapshot String
  rateCents        Int
  totalCents       Int
  notes            String?
}

model QuoteAttachment {
  id        String   @id @default(cuid())
  quoteId   String
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  url       String
  label     String?
  mimeType  String?
  createdAt DateTime @default(now())
}
